{"componentChunkName":"component---src-templates-post-js","path":"/leetcode/container-with-most-water","result":{"data":{"markdownRemark":{"html":"<h2>problem</h2>\n<p>Given n non-negative integers <code class=\"language-text\">a1, a2, ..., an</code> , where each represents a point at coordinate <code class=\"language-text\">(i, ai)</code>. <code class=\"language-text\">n</code> vertical lines are drawn such that the two endpoints of the line i is at <code class=\"language-text\">(i, ai)</code> and <code class=\"language-text\">(i, 0)</code>. Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.</p>\n<p><em>Notice</em> that you may not slant the container.</p>\n<h3>Example 1</h3>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 618px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/bb42a01c895a8410d087495ef9eeb8ae/e2d37/graph.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 46.28571428571429%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'185\\'%20viewBox=\\'0%200%20400%20185\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M270%20104v77h19c17%200%2018%200%204-1h-14V26h-9v78m-202%200v77h46l-19-1H77V27h-9v77m280-58l-1%2067v67h-29v-57h-9l-1%2029v29h49V45h-4l-5%201M115%2065l-1%2058v58h49v-39h-10v38h-29V64h-4l-5%201m77%2067v48h-14c-13%201-13%201%205%201h19V84h-10v48m39%209v39h-14c-13%201-13%201%205%201h19v-77l-5-1h-5v38M36%20171v10h9v-20h-9v10\\'%20fill=\\'%2364ffda\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <img\n        class=\"gatsby-resp-image-image\"\n        alt=\"graphical representation\"\n        title=\"graphical representation\"\n        src=\"/static/bb42a01c895a8410d087495ef9eeb8ae/e2d37/graph.png\"\n        srcset=\"/static/bb42a01c895a8410d087495ef9eeb8ae/1aaec/graph.png 175w,\n/static/bb42a01c895a8410d087495ef9eeb8ae/98287/graph.png 350w,\n/static/bb42a01c895a8410d087495ef9eeb8ae/e2d37/graph.png 618w\"\n        sizes=\"(max-width: 618px) 100vw, 618px\"\n        style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n        loading=\"lazy\"\n      />\n  </a>\n    </span></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.</code></pre></div>\n<p>for more details about the problem <a href=\"https://leetcode.com/problems/container-with-most-water/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">click here</a></p>\n<h2>Solution using Brute Force</h2>\n<p>It might gives an error which is TLE(Time Limit Exceeded)</p>\n<ul>\n<li>Time complexity: O(n^2)</li>\n<li>Space complexity: O(1)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">maxArea</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">height</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> area <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> height<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> height<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> newArea <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newArea <span class=\"token operator\">></span> area<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        area <span class=\"token operator\">=</span> newArea<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> area<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">min</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">i<span class=\"token punctuation\">,</span> j</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> j<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Solution using Two pointer</h2>\n<ul>\n<li>Time complexity: O(n)</li>\n<li>Space complexity: O(1)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">maxArea</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">height</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> low <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> high <span class=\"token operator\">=</span> height<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> area <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;</span> high<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> currArea <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> height<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> height<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> height<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>high <span class=\"token operator\">-</span> low<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    area <span class=\"token operator\">=</span> area <span class=\"token operator\">&lt;</span> currArea <span class=\"token operator\">?</span> currArea <span class=\"token operator\">:</span> area<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> height<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">--</span>high<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">++</span>low<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> area<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"Container With Most Water | Leetcode solution in JavaScript","description":"Solution for `Container With Most Water` using Brute Force and Two Pointer","date":"2021-12-05T00:00:00.000Z","slug":"/leetcode/container-with-most-water","tags":["Leetcode"]}}},"pageContext":{}},"staticQueryHashes":["1994492073","3391063840","604461682","956832748"]}